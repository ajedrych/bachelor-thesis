feb29 = "sfac"
)
daily_adjusted_sa$reg$aicc
# Merge DSA data to daily data
original <- dsa::get_original(daily_adjusted_sa)
original <- data.frame(date = index(original), coredata(original))
sa <- dsa::get_sa(daily_adjusted_sa)
sa <- data.frame(date = index(sa), coredata(sa))
trend <- dsa::get_trend(daily_adjusted_sa)
trend <- data.frame(date = index(trend), coredata(trend))
daily <- left_join(original, sa)
daily <- left_join(daily, trend)
holiday <-
data.frame(estimate = daily_adjusted_sa$reg$coef, se = sqrt(diag(daily_adjusted_sa$reg$var.coef)))[59:75,] %>%
mutate(
t_stat = (estimate / se)^2,
p_value = round(pchisq(t_stat, df =1 , lower = FALSE), 4)
)
stargazer(holiday, summary = FALSE)
stargazer(holiday, summary = FALSE, type = "text")
stargazer(holiday, summary = FALSE, type = "text")
stargazer(holiday, summary = FALSE)
stargazer(holiday, type='text',summary = FALSE)
stargazer(holiday, type='text',summary = FALSE)
stargazer(holiday, summary = FALSE)
holiday
setwd("C:/Users/aleks/WNE/bachelor-thesis/timeseries")
library(ggplot2)
library(dplyr)
library(readr)
library(Rcpp)
library(rlang)
library(prophet)
library(forecast)
install.packages("prophet")
library(prophet)
library(forecast)
library(readxl)
wwa <- read_excel("all_zdarzenia_warszawa2018-20.xlsx")
wwa <- read_excel("all_zdarzenia_warszawa2018_20.xlsx")
wwa <- read_excel("all_zdarzenia_warszawa2018_20.xlsx")
tail(wwa)
names(wwa) <- c('ds','y')
tail(wwa)
qplot(ds,y, data = wwa, main = "TS: Tickets")
qplot(ds,y, data = wwa, main = "TS: Zdarzenia drogowe")
model <- prophet(wwa, daily.seasonality = TRUE, yearly.seasonality = FALSE, weekly.seasonality = TRUE,
seasonality.mode = "multiplicative")
future <- data.frame(wwa$ds)
names(future) <- 'ds'
tail(future)
forecast <- predict(model, future)
plot(model, forecast %>%
xlabel = "Date", ylabel = "Tickets", col.axis = "blue")
plot(model, forecast)
prophet_plot_components(model, forecast)
model <- prophet(wwa, daily.seasonality = FALSE, yearly.seasonality = FALSE, weekly.seasonality = TRUE,
seasonality.mode = "multiplicative")
future <- data.frame(wwa$ds)
names(future) <- 'ds'
tail(future)
forecast <- predict(model, future)
plot(model, forecast)
prophet_plot_components(model, forecast)
diagnos <- data.frame(rmse = rmse(forecast$yhat, df1$y),
mape = mape(forecast$yhat, df1$y),
mae = mae(forecast$yhat, df1$y))
diagnos <- data.frame(rmse = rmse(forecast$yhat, wwa$y),
mape = mape(forecast$yhat, wwa$y),
mae = mae(forecast$yhat, wwa$y))
library(Metrics)
install.packages("Metrics")
library(Metrics)
diagnos <- data.frame(rmse = rmse(forecast$yhat, wwa$y),
mape = mape(forecast$yhat, wwa$y),
mae = mae(forecast$yhat, wwa$y))
print(diagnos)
wwa <- read_excel("all_zdarzenia_warszawa2018_20.xlsx")
tail(wwa)
sum(is.na(wwa))
AAPL <- wwa %>% rename(ds = DATA_ZDARZ, y = ID)
str(AAPL)
F1 <- prophet(AAPL, daily.seasonality = TRUE)
forecast <- make_future_dataframe(F1, periods = 365)
AAPLfc <- predict(F1, forecast)
tail(AAPLfc[c("ds", "yhat", "yhat_lower", "yhat_upper")])
plot(F1, AAPLfc, xlab = "", ylab="Zdarzenia drogowe
")
dyplot.prophet(F1, AAPLfc)
ggplot(wwa, aes(DATA_ZDARZ, ID)) +
geom_line() +
scale_x_date('month')  +
ylab("Daily Bike Checkouts") +
xlab("")
ggplot(wwa, aes(DATA_ZDARZ, ID)) +
geom_line() +
ylab("Daily Bike Checkouts") +
xlab("")
View(wwa)
View(wwa)
wwa$clean_cnt = tsclean(wwa$ID)
ggplot() +
geom_line(data = wwa, aes(x = DATA_ZDARZ, y = clean_cnt)) + ylab('Cleaned Bicycle Count')
View(wwa)
View(wwa)
wwa$cnt_ma30 = ma(wwa$clean_cnt, order=30)
ggplot() +
geom_line(data = wwa, aes(x = DATA_ZDARZ, y = clean_cnt, colour = "Counts")) +
geom_line(data = wwa, aes(x = DATA_ZDARZ, y = cnt_ma,   colour = "Weekly Moving Average"))  +
geom_line(data = wwa, aes(x = DATA_ZDARZ, y = cnt_ma30, colour = "Monthly Moving Average"))  +
ylab('Bicycle Count')
wwa$cnt_ma30 = ma(wwa$clean_cnt, order=30)
wwa$cnt_ma = ma(wwa$clean_cnt, order=7)
ggplot() +
geom_line(data = wwa, aes(x = DATA_ZDARZ, y = clean_cnt, colour = "Counts")) +
geom_line(data = wwa, aes(x = DATA_ZDARZ, y = cnt_ma,   colour = "Weekly Moving Average"))  +
geom_line(data = wwa, aes(x = DATA_ZDARZ, y = cnt_ma30, colour = "Monthly Moving Average"))  +
ylab('Bicycle Count')
count_ma = ts(na.omit(wwa$cnt_ma), frequency=30)
decomp = stl(count_ma, s.window="periodic")
deseasonal_cnt <- seasadj(decomp)
plot(decomp)
setwd("C:/Users/aleks/WNE/bachelor-thesis/COVID19")
wwa_pierwsza <- read_excel("covid19_WWA_pierwszafala.xlsx")
View(wwa_pierwsza)
View(wwa_pierwsza)
scaleFactor_wwa <- max(wwa_pierwsza$ill_cumulated) / max(wwa_pierwsza$death_cumulated)
ggplot(wwa_pierwsza, aes(x = date)) +
geom_line(aes(y = ill_cumulated, colour = "zachorowania"), size=1) +
geom_line(aes(y = death_cumulated * scaleFactor_wwa, colour = "zgony"), size=1) +
scale_y_continuous(sec.axis = sec_axis(~ . /scaleFactor_wwa, name="Zgony
"))+
scale_colour_manual(values = c("black", "#F8766D"))+
labs(y = "Zachorowania
",
colour = "")+
theme_minimal()+
theme(legend.title = element_blank())+
xlab("")
setwd("C:/Users/aleks/WNE/bachelor-thesis/timeseries")
library(readxl)
wwa <- read_excel("all_zdarzenia_warszawa2018_20.xlsx")
wwa <- read_excel("all_zdarzenia_warszawa2018_20.xlsx")
data(wwa)
library(stats)
data(wwa)
View(wwa)
View(wwa)
class(wwa)
plot(wwa)
install.packages("ggseas")
library(ggseas)
wwa <- read_excel("all_zdarzenia_warszawa2018_20.xlsx")
daily_adjusted <- xts::xts(x = wwa$ID, order.by = wwa$date)
wwa <-
wwa %>%
mutate(date = as.Date(DATA_ZDARZ)) %>%
group_by(date) %>%
mutate(weekday= weekdays(date),
month =  format(date, "%m"),
year = format(date, "%Y"))
# boxplot plot - day of the week
level_order <- factor(wwa$weekday, level = c("poniedziałek", "wtorek", "środa",
"czwartek", "piątek", "sobota", "niedziela"))
# Calculate daily adjusted and trend time series using DSA
Sys.setenv(TZ = "UTC")
daily_adjusted <- xts::xts(x = wwa$ID, order.by = wwa$date)
View(daily_adjusted)
View(daily_adjusted)
# SEATS with defaults
ggplot(daily_adjusted, aes(x = x, y = y)) +
geom_line(colour = "grey80") +
stat_seas() +
ggtitle("SEATS seasonal adjustment - international airline passengers") +
ylab("International airline passengers per month")
# SEATS with defaults
ggplot(daily_adjusted) +
geom_line(colour = "grey80") +
stat_seas() +
ggtitle("SEATS seasonal adjustment - international airline passengers") +
ylab("International airline passengers per month")
View(daily_adjusted)
View(wwa)
# SEATS with defaults
ggplot(wwa, aes(x = DATA_ZDARZ, y = ID)) +
geom_line(colour = "grey80") +
stat_seas() +
ggtitle("SEATS seasonal adjustment - international airline passengers") +
ylab("International airline passengers per month")
ggplot(wwa, aes(x = DATA_ZDARZ, y = ID)) +
geom_line(colour = "grey80") +
stat_seas(x13_params = list(x11 = "", outlier = NULL)) +
ggtitle("X11 seasonal adjustment - international airline passengers") +
ylab("International airline passengers per month")
ggplot(wwa, aes(x = DATA_ZDARZ, y = ID)) +
geom_line(colour = "grey80") +
stat_seas(x13_params = list(x11 = "", outlier = NULL)) +
ggtitle("X11 seasonal adjustment - international airline passengers") +
ylab("International airline passengers per month")
ggplot(wwa, aes(x = DATA_ZDARZ, y = ID)) +
geom_line(colour = "grey80") +
stat_decomp(type = "multiplicative")
ggsdc(wwa, aes(x = DATA_ZDARZ, y = ID)), method = "decompose") +
geom_line()
ggsdc(wwa, aes(x = DATA_ZDARZ, y = ID), method = "decompose") +
geom_line()
setwd("C:/Users/aleks/WNE/bachelor-thesis/timeseries")
library(readxl)
wwa <- read_excel("all_zdarzenia_warszawa2018_20.xlsx")
wwa <- read_excel("all_zdarzenia_warszawa2018_20.xlsx")
library(tidyverse)
library(scales)
library(dsa)
library(forecast)
library(stR)
library(xts)
library(stargazer)
library(grid)
library(readxl)
View(wwa)
View(wwa)
wwa <-
wwa %>%
mutate(date = as.Date(Date)) %>%
group_by(Date) %>%
summarise(zdarzenia = sum(Value)) %>%
mutate(weekday= weekdays(Date),
month =  format(Date, "%m"),
year = format(Date, "%Y"))
wwa %>%
mutate(
weekday = factor(weekday, levels = c("poniedziałek", "wtorek", "środa", "czwartek", "piątek", "sobota", "niedziela"))
) %>%
ggplot(aes(x = weekday, y = zdarzenia)) +
geom_boxplot() +
labs(
x = "Dzień tygodnia
",
y = "Zdarzenia drogowe
"
) +
scale_y_continuous(
breaks = c(0, 1000000, 2000000, 3000000, 4000000, 5000000, 6000000, 7000000),
labels = c("0", "1M", "2M", "3M", "4M", "5M", "6M", "7M"),
expand = c(0,0),
limit = c(0, 7000000)
)
wwa %>%
mutate(
weekday = factor(weekday, levels = c("poniedziałek", "wtorek", "środa", "czwartek", "piątek", "sobota", "niedziela"))
) %>%
ggplot(aes(x = weekday, y = zdarzenia)) +
geom_boxplot() +
labs(
x = "Dzień tygodnia
",
y = "Zdarzenia drogowe
"
)
wwa %>%
mutate(
weekday = factor(weekday, levels = c("poniedziałek", "wtorek", "środa", "czwartek", "piątek", "sobota", "niedziela"))
) %>%
ggplot(aes(x = weekday, y = zdarzenia)) +
geom_boxplot() +
labs(
x = "Dzień tygodnia
",
y = "Zdarzenia drogowe
"
)+
heme_minimal()+
theme(legend.title = element_blank())
wwa %>%
mutate(
weekday = factor(weekday, levels = c("poniedziałek", "wtorek", "środa", "czwartek", "piątek", "sobota", "niedziela"))
) %>%
ggplot(aes(x = weekday, y = zdarzenia)) +
geom_boxplot() +
labs(
x = "Dzień tygodnia
",
y = "Zdarzenia drogowe
"
)+
theme_minimal()+
theme(legend.title = element_blank())
wwa %>%
mutate(day = format(Date, format = "%d")) %>%
ggplot(aes(x = day, y = zdarzenia)) +
geom_boxplot() +
labs(
x = "Dzień miesiąca
",
y = "Zdarzenia drogowe
"
)+
theme_minimal()+
theme(legend.title = element_blank())
wwa %>%
mutate(month = format(month, format = "%m")) %>%
ggplot(aes(x = month, y = zdarzenia)) +
geom_boxplot() +
labs(
x = "Dzień miesiąca
",
y = "Zdarzenia drogowe
"
)+
theme_minimal()+
theme(legend.title = element_blank())
wwa %>%
mutate(month = format(month, format = "%m")) %>%
ggplot(aes(x = month, y = zdarzenia)) +
geom_boxplot() +
labs(
x = "Miesiąc
",
y = "Zdarzenia drogowe
"
)+
theme_minimal()+
theme(legend.title = element_blank())
ggplot(wwa) +
geom_line(aes(Date, zdarzenia)) +
labs(
x = "Dzień
",
y = "Zdarzenia drogowe
"
)+
theme_minimal()+
theme(legend.title = element_blank())
ggplot(wwa) +
geom_line(aes(Date, zdarzenia)) +
labs(
x = "Dzień
",
y = "
"
)+
theme_minimal()+
theme(legend.title = element_blank())
ggplot(wwa) +
geom_line(aes(Date, zdarzenia)) +
labs(
x = ""Dzień"
",
y = "Zdarzenia drogowe
"
)+
theme_minimal()+
theme(legend.title = element_blank())
ggplot(wwa) +
geom_line(aes(Date, zdarzenia)) +
labs(
x = "
",
y = "Zdarzenia drogowe
"
)+
theme_minimal()+
theme(legend.title = element_blank())
ggplot(wwa) +
geom_line(aes(Date, zdarzenia)) +
labs(
x = "",
y = "Zdarzenia drogowe
"
)+
theme_minimal()+
theme(legend.title = element_blank())
ggplot(wwa) +
geom_line(aes(Date, zdarzenia)) +
labs(
x = "",
y = "Zdarzenia drogowe
"
)+
theme_minimal()+
theme(legend.title = element_blank())
ggplot(wwa) +
geom_line(aes(Date, zdarzenia)) +
labs(
x = "",
y = "Zdarzenia drogowe
"
)+
theme_minimal()+
theme(legend.title = element_blank())
ggplot(wwa) +
geom_line(aes(Date, zdarzenia)) +
labs(
x = "ola",
y = "Zdarzenia drogowe
"
)+
theme_minimal()+
theme(legend.title = element_blank())
ggplot(wwa) +
geom_line(aes(Date, zdarzenia)) +
labs(
x = "Day",
y = "Daily Power Consumption (MW)"
) +
theme_minimal()+
theme(legend.title = element_blank())
ggplot(wwa) +
geom_line(aes(Date, zdarzenia)) +
labs(
x = "",
y = "Zdarzenia drogowe
"
) +
theme_minimal()+
theme(legend.title = element_blank())
AllHol <-
merge(
holidays[, c(
"EasterSunday",
"EasterMonday",
"GoodFriday",
"Ascension",
"CorpusChristi",
"Pentecost",
"ChristmasEve",
"ChristmasDay",
"NewYearsEve",
"NewYearsDay",
"LabourDay"
)])
AllHolUse <- dsa::multi_xts2ts(AllHol[restrict])
# Calculate daily adjusted and trend time series using DSA
Sys.setenv(TZ = "UTC")
daily_adjusted <- xts::xts(x = wwa$zdarzenia, order.by = wwa$Date)
daily_adjusted <- daily_adjusted[!is.na(daily_adjusted)]
dimnames(daily_adjusted)[[2]] <- "original"
reference_series <- daily_adjusted
restrict <- seq.Date(from = stats::start(reference_series),
to = stats::end(reference_series), by = "days")
restrict <- seq.Date(from = stats::start(reference_series),
to = stats::end(reference_series), by = "days")
restrict <- seq.Date(from = as.date(stats::start(reference_series)),
to = stats::end(reference_series), by = "days")
restrict <- seq.Date(from = as.Date(stats::start(reference_series)),
to = stats::end(reference_series), by = "days")
restrict <- seq.Date(from = as.Date(stats::start(reference_series)),
to = as.Date(stats::end(reference_series)), by = "days")
restrict_forecast <- seq.Date(from=stats::end(reference_series) + 1,
length.out = 365, by = "days")
restrict_forecast <- seq.Date(from=as.Date(stats::end(reference_series)) + 1,
length.out = 365, by = "days")
AllHol <-
merge(
holidays[, c(
"EasterSunday",
"EasterMonday",
"GoodFriday",
"Ascension",
"CorpusChristi",
"Pentecost",
"ChristmasEve",
"ChristmasDay",
"NewYearsEve",
"NewYearsDay",
"LabourDay"
)])
AllHolUse <- dsa::multi_xts2ts(AllHol[restrict])
AllHolForecast <- multi_xts2ts(AllHol[restrict_forecast], short=TRUE)
AllHolForecast <- AllHolForecast[,colSums(AllHolUse)!=0]
AllHolUse <- AllHolUse[,colSums(AllHolUse)!=0]
daily_adjusted_sa <-
dsa::dsa(daily_adjusted,
Log = TRUE,
cval = 10,
robust1 = TRUE,
robust2 = TRUE,
robust3 = TRUE,
s.window1 = 13,
s.window2 = NULL,
s.window3 = 13,
fourier_number = 26,
regressor = AllHolUse,
forecast_regressor = AllHolForecast,
feb29 = "sfac"
)
daily_adjusted_sa$reg$aicc
wwa %>%
mutate(month = format(month, format = "%m")) %>%
ggplot(aes(x = month, y = zdarzenia)) +
geom_boxplot() +
labs(
x = "Miesiąc
",
y = "Zdarzenia drogowe
"
)+
theme_minimal()+
theme(legend.title = element_blank())
wwa %>%
mutate(month = format(month, format = "%m")) %>%
ggplot(aes(x = month, y = zdarzenia)) +
geom_boxplot() +
facet_grid(year)+
labs(
x = "Miesiąc
",
y = "Zdarzenia drogowe
"
)+
theme_minimal()+
theme(legend.title = element_blank())
